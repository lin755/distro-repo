diff -Naur a/src/cc/frontends/clang/loader.cc b/src/cc/frontends/clang/loader.cc
--- a/src/cc/frontends/clang/loader.cc	2017-08-29 15:54:00.242480707 +0800
+++ b/src/cc/frontends/clang/loader.cc	2017-08-29 16:16:41.759001309 +0800
@@ -135,6 +135,11 @@
   // 22 Jul 2016. Also see bcc #615.
   vector<const char *> flags_cstr({"-O0", "-emit-llvm", "-I", dstack.cwd(),
                                    "-Wno-deprecated-declarations",
+                                   "-Wno-asm-operand-widths",
+                                   "-Wno-visibility",
+                                   "-Wno-int-to-pointer-cast",
+                                   "-Wno-implicit-function-declaration", 
+                                   "-Wno-tautological-compare",
                                    "-Wno-gnu-variable-sized-type-not-at-end",
                                    "-fno-color-diagnostics",
                                    "-fno-unwind-tables",
diff -Naur a/src/python/bcc/__init__.py b/src/python/bcc/__init__.py
--- a/src/python/bcc/__init__.py	2017-08-29 15:54:00.248480710 +0800
+++ b/src/python/bcc/__init__.py	2017-08-29 16:15:23.214971376 +0800
@@ -65,6 +65,10 @@
                 return (None, sym.offset,
                         ct.cast(sym.module, ct.c_char_p).value.decode())
             return (None, addr, None)
+
+        if sym.demangle_name == None:
+            return (None, addr, None)
+
         return (sym.demangle_name.decode(), sym.offset,
                 ct.cast(sym.module, ct.c_char_p).value.decode())
 
@@ -175,6 +179,151 @@
                         headers += "#include <%s>\n" % header
         return headers
 
+    @classmethod
+    def revise_header_files(self, text):
+        """
+        As for some architectures(especially for arm64), their linux kernel headers files
+        might contain assemble codes and specific register name.
+        However, the clang compiler doesn't recoginize them, and will fail to compile them.
+        Therefore, in order to make the compiler happy, it tries to avoid including them in header files. 
+
+        """
+
+        archtype = os.popen('uname -m').read().strip()
+        if archtype == "aarch64" :
+            extra_header = ""            
+
+            kernel_version = os.popen('uname -r').read().strip()
+            kernel_source_dir = "/lib/modules/" + kernel_version + "/source"
+            if not os.path.isdir(kernel_source_dir) :
+                 for filename in os.listdir("/usr/src/kernels/"):
+                    if re.match(kernel_version + r'.*', filename):
+                        kernel_source_dir = "/usr/src/kernels/" + filename
+                        break   
+            kernel_filelist=[ kernel_source_dir + "/arch/arm64/include/asm/sysreg.h",
+                              kernel_source_dir + "/arch/arm64/include/asm/virt.h"]
+            kernel_filelist2=[ kernel_source_dir + "/arch/arm64/include/asm/thread_info.h"]  
+            for filename in kernel_filelist:
+                if os.path.isfile(filename):
+                    filehandle = open(filename)
+       
+                    disable_assemble_flag = False
+                    cur_endif_index = 0
+                    for line in filehandle :
+                        if re.match("#if.*__ASSEMBLY__", line):
+                            extra_header += "#if 0 \n" + line
+                            disable_assemble_flag = True
+                            cur_endif_index = 0
+                        elif re.match("#ifdef", line):
+                            if disable_assemble_flag:
+                                ++cur_endif_index
+                            extra_header += line
+                        elif re.match("#endif", line):
+                            extra_header += line
+                            if cur_endif_index > 0:
+                                --cur_endif_index
+                            elif disable_assemble_flag:
+                                disable_assemble_flag = False
+                                extra_header += "#endif \n"
+                        else:
+                            extra_header += line
+            for filename in kernel_filelist2:
+                filehandle = open(filename)
+                for line in filehandle:
+                    line=line.replace("sp_el0", "est_sp_el0")
+                    extra_header += line  
+
+            extra_header += """
+                #define __ASM_SYSREG_H
+                #define __ASM__VIRT_H
+                #define __ASM_THREAD_INFO_H
+                #define __ASM_ARCH_TIMER_H
+                #define __ASM_UACCESS_H
+                #define cntp_tval_el0 0
+                #define cntv_ctl_el0 0
+                #define sp_el0 0
+                #define VERIFY_WRITE 1
+                #define VERIFY_READ 0
+            """
+            return extra_header + text
+        else :
+            return text
+    
+    @classmethod
+    def revise_header_files_srcfile(self, src_file):
+        """
+        As for some architectures(especially for arm64), their linux kernel headers files
+        might contain assemble codes and specific register name.
+        However, the clang compiler doesn't recoginize them, and will fail to compile them.
+        Therefore, in order to make the compiler happy, it tries to avoid including them in header files. 
+
+        """
+
+        archtype = os.popen('uname -m').read().strip()
+        if archtype == "aarch64" :
+            extra_header = ""            
+
+            kernel_version = os.popen('uname -r').read().strip()
+            kernel_source_dir = "/lib/modules/" + kernel_version + "/source"
+            if not os.path.isdir(kernel_source_dir) :
+                 for filename in os.listdir("/usr/src/kernels/"):
+                    if re.match(kernel_version + r'.*', filename):
+                        kernel_source_dir = "/usr/src/kernels/" + filename
+                        break   
+            kernel_filelist=[ kernel_source_dir + "/arch/arm64/include/asm/sysreg.h",
+                              kernel_source_dir + "/arch/arm64/include/asm/virt.h"]
+            kernel_filelist2=[ kernel_source_dir + "/arch/arm64/include/asm/thread_info.h"]
+            for filename in kernel_filelist:
+                if os.path.isfile(filename):
+                    filehandle = open(filename)
+       
+                    disable_assemble_flag = False
+                    cur_endif_index = 0
+                    for line in filehandle :
+                        if re.match("#if.*__ASSEMBLY__", line):
+                            extra_header += "#if 0 \n" + line
+                            disable_assemble_flag = True
+                            cur_endif_index = 0
+                        elif re.match("#ifdef", line):
+                            if disable_assemble_flag:
+                                ++cur_endif_index
+                            extra_header += line
+                        elif re.match("#endif", line):
+                            extra_header += line
+                            if cur_endif_index > 0:
+                                --cur_endif_index
+                            elif disable_assemble_flag:
+                                disable_assemble_flag = False
+                                extra_header += "#endif \n"
+                        else:
+                            extra_header += line
+            for filename in kernel_filelist2:
+                filehandle = open(filename)
+                for line in filehandle:
+                    line=line.replace("sp_el0", "est_sp_el0")
+                    extra_header += line
+
+            extra_header += """
+                #define __ASM_SYSREG_H
+                #define __ASM__VIRT_H
+                #define __ASM_THREAD_INFO_H
+                #define __ASM_ARCH_TIMER_H
+                #define __ASM_UACCESS_H
+                #define cntp_tval_el0 0
+                #define cntv_ctl_el0 0
+                #define sp_el0 0
+                #define VERIFY_WRITE 1
+                #define VERIFY_READ 0
+            """
+            f=open(BPF._find_file(src_file),'r')
+            extra_header += f.read()
+            f.close()
+            f=open(BPF._find_file(src_file),'w')
+            f.write(extra_header)
+            f.close()
+        else :
+            pass
+   
     # defined for compatibility reasons, to be removed
     Table = Table
 
@@ -268,9 +397,11 @@
                 text = usdt_text + text
 
         if text:
+            text = self.revise_header_files(text)
             self.module = lib.bpf_module_create_c_from_string(text.encode("ascii"),
                     self.debug, cflags_array, len(cflags_array))
         else:
+            self.revise_header_files_srcfile(src_file)
             src_file = BPF._find_file(src_file)
             hdr_file = BPF._find_file(hdr_file)
             if src_file.endswith(".b"):
